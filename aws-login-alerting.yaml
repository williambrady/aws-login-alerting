AWSTemplateFormatVersion: '2010-09-09'
Description: Alert on Federated Logins to AWS Account
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon SNS parameters
        Parameters:
          - SNSSubscriptions
          - SNSTopicName
      - Label:
          default: AWS Lambda parameters
        Parameters:
          - LambdaTimeout
Parameters:
  SNSSubscriptions:
    Type: String
    Description: Enter an email address to receive notifications on Federated AWS user API activity
    Default: teamDistributionList@example.org
  SNSTopicName:
    Description: SNS topic name
    Type: String
    Default: federated-login-alerting
  LambdaTimeout:
    Type: Number
    Default: '60'
    Description: Enter a timeout value in seconds for the lambda function.

Resources:
  FedActivitySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Federated-Login-Alert
      Subscription:
        - Endpoint: !Ref 'SNSSubscriptions'
          Protocol: email
      TopicName: !Ref 'SNSTopicName'

  FederatedEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule for monitoring Federated API activity
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
        detail:
          userIdentity:
            type:
              - AssumedRole
          eventName:
            - ConsoleLogin
      Name: !Sub '${AWS::StackName}-FederatedActivityRule'
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'FederatedActivityLambda.Arn'
          Id: !Ref 'AWS::StackName'

  FederatedActivityLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          import botocore.session
          from botocore.exceptions import ClientError
          session = botocore.session.get_session()

          logging.basicConfig(level=logging.DEBUG)
          logger=logging.getLogger(__name__)

          def handler(event, context):
          	logger.setLevel(logging.DEBUG)
          	eventname = event['detail']['eventName']
          	snsARN = os.environ['SNSARN']
          	user = event['detail']['userIdentity']['type']

          	logger.debug("Event is --- %s" %event)
          	logger.debug("Event Name is--- %s" %eventname)
          	logger.debug("SNSARN is-- %s" %snsARN)
          	logger.debug("User Type is -- %s" %user)

          	client = boto3.client('iam')
          	snsclient = boto3.client('sns')
          	response = client.list_account_aliases()
          	logger.debug("List Account Alias response --- %s" %response)

          	try:
          		if not response['AccountAliases']:
          			accntAliase = (boto3.client('sts').get_caller_identity()['Account'])
          			logger.info("Account Aliase is not defined. Account ID is %s" %accntAliase)
          		else:
          			accntAliase = response['AccountAliases'][0]
          			logger.info("Account Aliase is : %s" %accntAliase)

          	except ClientError as e:
          		logger.error("Client Error occured")

          	try:
          		#Sending the notification...
          		snspublish = snsclient.publish(
          						TargetArn= snsARN,
          						Subject=(("Federated AssumeRole API call-\"%s\" detected in Account-\"%s\"" %(eventname,accntAliase))[:100]),
          						Message=json.dumps({'default':json.dumps(event)}),
          						MessageStructure='json')
          		logger.debug("SNS publish response is-- %s" %snspublish)
          	except ClientError as e:
          		logger.error("An error occured: %s" %e)
      Handler: index.handler
      Role: !GetAtt 'FederatedLambdaAPIMonitorRole.Arn'
      Runtime: python3.9
      Timeout: !Ref 'LambdaTimeout'
      Environment:
        Variables:
          SNSARN: !Ref 'FedActivitySNSTopic'

  FederatedLambdaAPIMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub '${AWS::StackName}-LambdaFederatedAPIMonitorRole'

  LambdaFedAPIMonitorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: LogStreamAccess
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - arn:aws:logs:*:*:*
          - Sid: SNSPublishAllow
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - arn:aws:sns:*:*:*
          - Sid: ListAccountAlias
            Action:
              - iam:ListAccountAliases
            Effect: Allow
            Resource: '*'
      PolicyName: !Sub '${AWS::StackName}-FedLambdaAPIMonitorPolicy'
      Roles:
        - !Ref 'FederatedLambdaAPIMonitorRole'

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'FederatedActivityLambda'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'FederatedEventsRule.Arn'

Outputs:

  EventsRule:
    Value: !Ref 'FederatedEventsRule'
    Export:
      Name: !Sub '${AWS::StackName}-FedAPIMonitorEventsRule'
    Description: Event Rule ID
  LambdaFuncName:
    Value: !Ref 'FederatedActivityLambda'
    Export:
      Name: !Sub '${AWS::StackName}-FederatedAPIMonitorLambda'
    Description: Lambda function ID
  SNSTopicName:
    Value: !Ref 'SNSTopicName'
    Export:
      Name: !Sub '${AWS::StackName}-FederatedAPIMonitorSNSTopic'
    Description: SNS Topic Name
