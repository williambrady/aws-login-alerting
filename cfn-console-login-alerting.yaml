AWSTemplateFormatVersion: '2010-09-09'
Description: Alert on Web Console Logins to AWS Account
############################################################################################################
# Updated to meet the needs of Security Hub checks:
# - SNS.1: SNS topics should be encrypted at-rest using AWS KMS
# - SNS.2: Logging of delivery status should be enabled for notification messages sent to a topic
############################################################################################################

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon SNS parameters
        Parameters:
          - SNSSubscriptions
      - Label:
          default: AWS Lambda parameters
        Parameters:
          - LambdaTimeout

Parameters:
  SNSSubscriptions:
    Type: String
    Description: Enter an email address to receive notifications on AWS user API activity
    Default: teamDistributionList@example.org
  LambdaTimeout:
    Type: Number
    Default: '60'
    Description: Enter a timeout value in seconds for the lambda function.
  HomeRegion:
    Type: String
    Default: us-east-1
    Description: The region in which the stack is created
  KMSKeyDeletionWindowInDays:
    Type: Number
    Default: 7
    Description: Number of days to retain Deleted Keys

Conditions:
  IsHomeRegion: !Equals [ !Ref 'AWS::Region', !Ref 'HomeRegion' ]
  IsAwayRegion: !Not [ !Condition IsHomeRegion ]

Resources:
  SNSKMSKey:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for AWS SNS
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - kms:*
            Resource: '*'
      PendingWindowInDays: !Ref KMSKeyDeletionWindowInDays

  ActivitySNSTopic:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref AWS::StackName
      Subscription:
        - Endpoint: !Ref SNSSubscriptions
          Protocol: email
      TopicName: !Ref AWS::StackName
      KmsMasterKeyId: !GetAtt SNSKMSKey.Arn
      DeliveryStatusLogging:
        - FailureFeedbackRoleArn: !GetAtt SNSPublishToCloudwatchLogsRole.Arn
          SuccessFeedbackRoleArn: !GetAtt SNSPublishToCloudwatchLogsRole.Arn
          Protocol: sqs

  SNSPublishToCloudwatchLogsRole:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishToCloudwatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sns/*'

  EventRole:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for cross-region event delivery
      Policies:
        - PolicyName: CrossRegionEventPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:events:'
                    - !Ref 'HomeRegion'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':event-bus/default'
      RoleName: !Sub '${AWS::StackName}-EventRole'
  
  ConsoleEventsRule:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule for monitoring Web Console API activity
      EventBusName: default
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
        detail:
          eventName:
            - ConsoleLogin
      Name: !Sub '${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-ActivityRule'
      State: ENABLED
      Targets:
        - Arn: !Join
            - ':'
            - - 'arn'
              - 'aws'
              - 'lambda'
              - !Ref 'HomeRegion'
              - !Ref 'AWS::AccountId'
              - 'function'
              - !Ref 'AWS::StackName'
          Id: !Ref 'AWS::StackName'

  ConsoleEventsForwardingRule:
    # All regions except Home Region
    Condition: IsAwayRegion
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule for forwarding Web Console API activity to Home Region
      EventBusName: default
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
        detail:
          # userIdentity: type: AssumedRole for federated logins
          # userIdentity: type: IAMUser for IAM user logins
          # userIdentity:
          #   type:
          #     - AssumedRole
          eventName:
            - ConsoleLogin
      Name: !Sub '${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-ForwardRule'
      State: ENABLED
      Targets:
        - Arn: !Join
          - ''
          - - 'arn:aws:events:'
            - !Ref 'HomeRegion'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':event-bus/default'
          Id: 'CrossRegionEventBus'
          RoleArn: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':role/'
              - !Sub '${AWS::StackName}-EventRole'

  ConsoleActivityLambda:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          import botocore.session
          from botocore.exceptions import ClientError
          session = botocore.session.get_session()

          logging.basicConfig(level=logging.DEBUG)
          logger=logging.getLogger(__name__)

          def handler(event, context):
            logger.setLevel(logging.DEBUG)
            eventname = event['detail']['eventName']
            snsARN = os.environ['SNSARN']
            user = event['detail']['userIdentity']['type']
            status = event['detail']['responseElements']['ConsoleLogin']

            try:
                username = event['detail']['userIdentity']['userName']
                logger.error("userName is %s" % username)
            except KeyError:
                logger.error("userName not found, using principalId")
                usertest = event['detail']['userIdentity']['principalId']
                username = usertest.split(':')[1]

            logger.debug("Event is --- %s" %event)
            logger.debug("Event Name is--- %s" %eventname)
            logger.debug("SNSARN is-- %s" %snsARN)
            logger.debug("User Type is -- %s" %user)

            client = boto3.client('iam')
            snsclient = boto3.client('sns')
            response = client.list_account_aliases()
            logger.debug("List Account Alias response --- %s" %response)

            try:
              if not response['AccountAliases']:
                accntAliase = (boto3.client('sts').get_caller_identity()['Account'])
                logger.info("Account Aliase is not defined. Account ID is %s" %accntAliase)
              else:
                accntAliase = response['AccountAliases'][0]
                logger.info("Account Aliase is : %s" %accntAliase)

            except ClientError as e:
              logger.error("Client Error occured")

            try:
              #Sending the notification...
              snspublish = snsclient.publish(
                      TargetArn= snsARN,
                      Subject=(("Web Console Login: %s %s %s %s" %(eventname,status,accntAliase,username))[:100]),
                      Message=json.dumps({'default':json.dumps(event, indent=4)}),
                      MessageStructure='json')
              logger.debug("SNS publish response is-- %s" %snspublish)
            except ClientError as e:
              logger.error("An error occured: %s" %e)

      FunctionName: !Ref 'AWS::StackName'
      Handler: index.handler
      Role: !GetAtt 'ConsoleLambdaAPIMonitorRole.Arn'
      Runtime: python3.9
      Timeout: !Ref 'LambdaTimeout'
      Environment:
        Variables:
          SNSARN: !Join
            - ''
            - - 'arn:aws:sns:'
              - !Ref 'HomeRegion'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref 'AWS::StackName'

  ConsoleLambdaAPIMonitorRole:
    # Home Region Only - Global Role
    Condition: IsHomeRegion
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub '${AWS::StackName}-LambdaConsoleAPIMonitorRole'

  LambdaAPIMonitorPolicy:
    # Home Region Only - Global Policy
    Condition: IsHomeRegion
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: LogStreamAccess
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - arn:aws:logs:*:*:*
          - Sid: SNSPublishAllow
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - arn:aws:sns:*:*:*
          - Sid: ListAccountAlias
            Action:
              - iam:ListAccountAliases
            Effect: Allow
            Resource: '*'
      PolicyName: !Sub '${AWS::StackName}-LambdaAPIMonitorPolicy'
      Roles:
        - !Ref 'ConsoleLambdaAPIMonitorRole'

  LambdaPermission:
    # Home Region Only
    Condition: IsHomeRegion
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'ConsoleActivityLambda'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'ConsoleEventsRule.Arn'

Outputs:
  ConsoleActivitySNSTopic:
    Condition: IsHomeRegion
    Description: "The ARN of the SNS topic for console activity"
    Value: !Ref ActivitySNSTopic
  ConsoleActivityLambda:
    Condition: IsHomeRegion
    Description: "The ARN of the Lambda function for console activity"
    Value: !GetAtt ConsoleActivityLambda.Arn
  ConsoleActivityLambdaRole:
    Condition: IsHomeRegion
    Description: "The ARN of the Lambda function role for console activity"
    Value: !GetAtt ConsoleLambdaAPIMonitorRole.Arn
  ConsoleActivityLambdaPolicy:
    Condition: IsHomeRegion
    Description: "The ARN of the Lambda function policy for console activity"
    Value: !Ref LambdaAPIMonitorPolicy
  ConsoleActivityLambdaPermission:
    Condition: IsHomeRegion
    Description: "The ARN of the Lambda function permission for console activity"
    Value: !Ref LambdaPermission

